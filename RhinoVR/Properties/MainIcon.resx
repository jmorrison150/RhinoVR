<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ling" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAFMAAACSAAAAxwAA
        AOoAAAD6AAAA+gAAAOoAAADHAAAAkgAAAFMAAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAKEAAAD8AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAAChAAAAHQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAD0AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD0AAAAmQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAADPAAAA/gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAzwAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAA8AAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA8AAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAA
        APAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APIAAACtAAAAXwAAAE4AAACEAAAA4wAAAP8AAAD/AAAA8AAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADPAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADsAAAAIwAAADAAAAC3AAAAxgAAAHIAAAAIAAAAlgAAAP8AAAD/AAAAzwAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAmAAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP0AAAC1AAAA+QAAAP8AAAD/AAAA/wAAALcAAAAKAAAA6QAAAP8AAAD+AAAAmQAA
        AAEAAAAAAAAAAAAAAB4AAAD1AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAADUAAACTAAAA/wAA
        AP8AAAD1AAAAHgAAAAAAAAAHAAAAoAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAfgAA
        AFYAAAD/AAAA/wAAAP8AAAChAAAAAAAAACwAAAD8AAAA/wAAAP8AAAD/AAAAuQAAANQAAACzAAAA2AAA
        AKAAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAC7AAAA1AAAAP8AAAD/AAAA6wAAAJQAAACGAAAAqgAA
        AP8AAACRAAAASQAAAP8AAAD/AAAA/wAAAPwAAAAdAAAAiQAAAP8AAAD/AAAA/wAAAP8AAABLAAAAkgAA
        ADwAAACcAAAACAAAANYAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAE8AAACPAAAA/wAAAJIAAAAXAAAAXgAA
        AJEAAABYAAAAJwAAAHMAAABJAAAA/wAAAP8AAAD/AAAA/wAAAFMAAADKAAAA/wAAAP8AAAD/AAAA/wAA
        AEsAAACSAAAAPAAAAJwAAAAIAAAA1gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAATwAAAI8AAADxAAAAFAAA
        ALQAAAD/AAAA/wAAAP8AAACoAAAAAAAAAEkAAAD/AAAA/wAAAP8AAAD/AAAAkgAAAOwAAAD/AAAA/wAA
        AP8AAAD/AAAASwAAAJIAAAA8AAAAnAAAAAgAAADWAAAA/wAAAP8AAAD/AAAA/wAAAP8AAABPAAAAjwAA
        AIcAAABRAAAA/wAAAP8AAAD/AAAA/wAAAP0AAAAXAAAASQAAAP8AAAD/AAAA/wAAAP8AAADIAAAA+gAA
        AP8AAAD/AAAA/wAAAP8AAABLAAAAkgAAADwAAACcAAAACAAAANYAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AE8AAACOAAAAMQAAAJQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGYAAABJAAAA/wAAAP8AAAD/AAAA/wAA
        AOoAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAEsAAACSAAAAPAAAAJwAAAAIAAAA1gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAATwAAAI4AAAAfAAAAoQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAiQAAAEkAAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAAP4AAAD/AAAA/wAAAP8AAAD/AAAASwAAAJIAAAA8AAAAnAAAAAgAAADWAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAABPAAAAjgAAAB8AAAChAAAA/wAAAP8AAAD/AAAA/wAAAP8AAACLAAAASQAA
        AP8AAAD/AAAA/wAAAP8AAAD7AAAA/gAAAP8AAAD/AAAA/wAAAP8AAABLAAAAkgAAADwAAACcAAAACAAA
        ANQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAE8AAACOAAAAJQAAAJcAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AGsAAABJAAAA/wAAAP8AAAD/AAAA/wAAAOoAAAD6AAAA/wAAAP8AAAD/AAAA/wAAAEsAAACSAAAAPAAA
        AJwAAAAIAAAAnwAAAP8AAAD/AAAA/wAAAP8AAAD/AAAARgAAAJAAAACAAAAAVgAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAJQAAAEkAAAD/AAAA/wAAAP8AAAD/AAAAyAAAAOYAAAD/AAAA/wAAAP8AAAD/AAAASwAA
        AJIAAAA8AAAAnAAAAAgAAAAXAAAA5gAAAP8AAAD/AAAA/wAAALwAAAAOAAAA7wAAAOUAAAARAAAAxQAA
        AP8AAAD/AAAA/wAAAL4AAAAAAAAASQAAAP8AAAD/AAAA/wAAAP8AAACSAAAAswAAAP8AAAD/AAAA/wAA
        AP8AAABLAAAAkgAAADwAAACcAAAACAAAAGkAAAAvAAAAiwAAAJsAAAB8AAAAGAAAAIcAAAD/AAAA/wAA
        AH8AAAAVAAAAhQAAAJsAAAB3AAAAJgAAAF8AAABJAAAA/wAAAP8AAAD/AAAA/wAAAFMAAABXAAAA/AAA
        AP8AAAD/AAAA/wAAAEsAAACSAAAAngAAAM4AAACSAAAA7AAAAOIAAAB3AAAAPAAAAHcAAADhAAAA/wAA
        AP8AAAD/AAAA/wAAANcAAABoAAAAPwAAAIIAAADwAAAAzgAAAK8AAAD/AAAA/wAAAP8AAAD8AAAAHQAA
        AA8AAACgAAAA/wAAAP8AAAD/AAAASwAAAJIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AKEAAAAAAAAAAQAAAB0AAAD1AAAA/wAAAP8AAABLAAAAkgAAAPsAAAD9AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD1AAAAHgAAAAAAAAAAAAAAAQAAAJgAAAD+AAAA/wAAAEsAAABlAAAAEgAAAEAAAAD+AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/gAAAJkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAM8AAAD/AAAASwAAABEAAAAAAAAAAwAA
        APgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAPAAAAB/AAAAqAAA
        AGsAAACbAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA8AAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAA
        APAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIAAAAM8AAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAADPAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAD0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD0AAAAmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAChAAAA/AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAoQAAAB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA8AAABXAAAAswAA
        AOYAAAD6AAAA/gAAAP4AAAD+AAAA+gAAAOwAAADKAAAAigAAACwAAAAHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//AP//+AAf/+AAB//AAAP/gAAB/wAAYP4AAZh8AAAEPAAABDgAAAYYAA
        ACEFQI3hBUCQYAVAkGAFQKBgBUCgIAVAoCAFQKBgBUCQYAVgkGAFcxnhhA4GAYQAAAHEAAADx4AAA+eA
        AAf1AAAP+AAAH/wAAD/+AAB//4AB///gB/8=
</value>
  </data>
</root>